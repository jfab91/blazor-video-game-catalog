@using Models
@inject NavigationManager NavigationManager
@inject GameClient client

@page "/"


<PageTitle>Game Catalog</PageTitle>

<h1>Game Catalog</h1>

<div class="row mb-4">
  <div class="col-sm-6">
    <button type="button" class="btn btn-primary" @onclick="CreateGame">New Game</button>
  </div>
  <div class="col">
    <input type="text" 
      class="form-control" 
      placeholder="Search by name or genre" 
      @bind="search" 
      @bind:event="oninput"
      @onkeyup="FetchGamesAsync"  />
  </div>
</div>

@if (games is null) 
{
  <p><em>Loading...</em></p>
} 
else 
{

  <DeleteGame Game="@currentGame" OnClose="@OnDeleteModalCloseAsync"></DeleteGame>

  <table class="table table-striped table-bordered table-hover">
    <thead class="table-dark">
      <th>Id</th>
      <th>Name</th>
      <th>Genre</th>
      <th>Price</th>
      <th>Release Date</th>
      <th></th>
    </thead>
    <tbody>
      @foreach (var game in games)
      {
        <tr>
          <td>@game.Id</td>
          <td>@game.Name</td>
          <td>@game.Genre</td>
          <td>@game.Price</td>
          <td>@game.ReleaseDate.ToShortDateString()</td>
          <td>
            <button class="btn btn-primary" @onclick="(() => EditGame(game.Id))">
              <i class="bi bi-pencil-square"></i>
            </button>
            <button class="btn btn-danger" 
                data-bs-toggle="modal" 
                data-bs-target="#deleteModal"
                @onclick="(() => currentGame = game)">
              <i class="bi bi-trash"></i>
            </button>
          </td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
    private Game[]? games;
    private Game? currentGame;
    private string? search;

    protected override async Task OnInitializedAsync() 
    {
      await FetchGamesAsync();
    }

    private void CreateGame() => NavigationManager.NavigateTo("/game");

    private void EditGame(int id) => NavigationManager.NavigateTo($"/game/{id}");

    private async Task OnDeleteModalCloseAsync(bool accepted) 
    {
      if (accepted) 
      {
        await client.DeleteGameAsync(currentGame!.Id);
        await FetchGamesAsync();
      }
    }

    private async Task FetchGamesAsync()
    {
      games  = await client.GetGamesAsync(search);
    }
}